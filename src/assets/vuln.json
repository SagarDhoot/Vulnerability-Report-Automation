[
    {
        "title": " Application is vulnerable to SQL injection attack.",
        "severity": "Critical",
        "ref": "",
        "desc": "An SQL injection attack consists of insertion of an SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. ",
        "impact": "An attacker can retrive sensitive information from database and can cause serious security threat to the application.",
        "rec": "Strong input validation can be used to prevent SQL injection attacks in an application. Additionally, parameterized  queries can also be used to prevent these attacks.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application's authentication can be bypassed",
        "severity": "High",
        "ref": "",
        "desc": "Applications require authentication to gain access to private information or to execute certain tasks for specific user. But certain application does not properly perform authentication, allowing it to be bypassed through various methods. ",
        "impact": "An attacker can bypass protection mechanism to gain privileges / assume identity.",
        "rec": "Application's authentication should be implemented in such a way that it should not be compromised.(provide solution according to attack)",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is Vulnerable to OS Command injection attack.",
        "severity": "High",
        "ref": "",
        "desc": "OS command injection is a technique used via a web interface in order to execute OS commands on a web server. The user supplies operating system commands through a web interface in order to execute OS commands. Any web interface that is not properly sanitized is subject to this exploit. With the ability to execute OS commands, the user can upload malicious programs or even obtain passwords.",
        "impact": "An attacker can execute OS commands, and get complete control of the application server",
        "rec": "Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands.\n",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to SSI Injection attack.",
        "severity": "High",
        "ref": "",
        "desc": "SSI Injection (Server-side Include) is a server-side exploit technique that allows an attacker to send code into a web application, which will later be executed locally by the web server.",
        "impact": "An attacker can reveal sensitive information from application that may harm business.",
        "rec": "Disable SSI execution on pages that do not require it. For pages requiring SSI ensure that you perform the following checks:\n1. Only enable the SSI directives that are needed for this page and disable all others.\n2. HTML entity encode user supplied data before passing it to a page with SSI execution permissions.\n3. Use SUExec[5] to have the page execute as the owner of the file instead of the web server user.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Xpath Injection attack.",
        "severity": "High",
        "ref": "",
        "desc": "XPath Injection attacks occur when a web site uses user-supplied information to construct an XPath query for XML data. By sending intentionally malformed information into the web site, an attacker can find out how the XML data is structured, or access data that he may not normally have access to. He may even be able to elevate his privileges on the web site if the XML data is being used for authentication (such as an XML based user file). ",
        "impact": "An attacker can reveal sensitive information from application that may harm business",
        "rec": "Strong input validation can be used to prevent XPATH injection attacks in an application. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to LDAP Injection",
        "severity": "High",
        "ref": "",
        "desc": "LDAP is an acronym for Lightweight Directory Access Protocol. LDAP is a protocol to store information about users, hosts, and many other objects. LDAP injection is a server side attack, which could allow sensitive information about users and hosts represented in an LDAP structure to be disclosed, modified, or inserted.\nThis is done by manipulating input parameters afterwards passed to internal search, add, and modify functions.",
        "impact": "An attacker can reveal sensitive information from application that may harm business\n",
        "rec": "Strong input validation can be used to prevent LDAP injection attacks in an application. Additionally, precompiled queries can also be used to prevent these attacks.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to IMAP/SMTP Injection",
        "severity": "Medium",
        "ref": "",
        "desc": "An attacker exploits weaknessness in input validation on IMAP/SMTP servers to execute commands on the server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands. ",
        "impact": "An authenticated malicious user could execute arbitrary IMAP / SMTP commands on the affected mail server processes. This may allow the user to send SPAM from the server or to exploit latent vulnerabilities in the underlying system.",
        "rec": "",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerabe to XML Injection",
        "severity": "High",
        "ref": "",
        "desc": "XML injection occurs when:\n1. Data enters a program from an untrusted source.\n2. The data is written to an XML document.\nThe semantics of XML documents and messages can be altered if an attacker has the ability to write raw XML",
        "impact": "An attacker can execute unauthorized code or commands, read application data,modify application data",
        "rec": "Each WSDL should contain a detailed description of the used elements, attributes and data types. For example when only one Element <Surname> with a maximum length of 20 characters is expected. For eg by using the data type \"string\" only strings are allowed within the element tags. The <maxLength> tag limits the string length to 20 characters. The number of occurrences of the element \"Surname\" is limited to 1",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to XML External Entity (XXE) Injection",
        "severity": "High",
        "ref": "",
        "desc": "XML supports a facility known as \"external entities\", which instruct an XML processor to retrieve and perform an inline include of XML located at a particular URI. An external XML entity can be used to append or modify the document type declaration (DTD) associated with an XML document. An external XML entity can also be used to include XML within the content of an XML document. ",
        "impact": "An application can inject XML external entities which can lead to information disclosure.",
        "rec": "If possible it's recommended to disable parsing of XML external entities.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Valid users can be enumerated from the error messages at login page",
        "severity": "Low",
        "ref": "",
        "desc": "The application does not handle all errors properly.If the application displays different error messages when a wrong username or a wrong password are entered then valid usernames can be enumerated.",
        "impact": "An attacker can enumerate the valid userid/password and can use this information to login into the application",
        "rec": "All errors should be handled by the application and a custom error message should be displayed that does not reveal any important information.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Cross-Site Scripting attack.",
        "severity": "High",
        "ref": "",
        "desc": "Cross-site scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user.\n- XSS attacks occur when: \n1. Data enters a Web application through an untrusted source, most frequently a web request.\n2. The data is included in dynamic content that is sent to a web user without being validated for malicious content. \n- What an attacker can do with Xss ?\n1. An attacker can obtain a user\u2019s session cookie, they can impersonate that user.\n2. JavaScript can read and make arbitrary modifications to the browser\u2019s DOM (within the page that JavaScript is running).\n3. JavaScript can use XMLHttpRequest to send HTTP requests with arbitrary content to arbitrary destinations.\n 4. JavaScript in modern browsers can leverage HTML5 APIs such as accessing a user\u2019s geolocation, webcam, microphone and even the specific files from the user\u2019s file system.",
        "impact": "An Attacker can execute code in a victim\u2019s browser and can perform malicious activity, posing serious security threat to the application.",
        "rec": "Create a white-list of characters needed by the application. Once this white-list is ready the application should disallow all requests containing any other character apart from the white-list. The application should not accept any script, special characters, html in fields whenever not required. It should escape the special characters that may prove to be harmful. Following are some of the main characters used in scripts that must be escaped:\n< > ( ) ' \"\" / \\ *; = { } ` (back tick) % + ^! - \\x00-\\x20 (x is hexadecimal notation) [Includes Space, Tab, Carriage Return, Line Feed]\nThe characters can be escaped as per the list available at this link: http://www.theukwebdesigncompany.com/articles/entity-escape-characters.php",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to HTML injection attack",
        "severity": "High",
        "ref": "",
        "desc": "In the HTML injection attack only allows the injection of certain HTML tags. When an application does not properly handle user supplied data, an attacker can supply valid HTML code, typically via a parameter value, and inject their own content into the page. This attack is typically used in conjunction with some form of social engineering, as the attack is exploiting a code-based vulnerability and a user's trust. ",
        "impact": "An Attacker can execute code in a victim\u2019s browser and can perform malicious activity, posing serious security threat to the application.",
        "rec": "Create a white-list of characters needed by the application. Once this white-list is ready the application should disallow all requests containing any other character apart from the white-list. The application should not accept any script, special characters, html in fields whenever not required. It should escape the special characters that may prove to be harmful. Following are some of the main characters used in scripts that must be escaped:\n< > ( ) ' \"\" / \\ *; = { } ` (back tick) % + ^! - \\x00-\\x20 (x is hexadecimal notation) [Includes Space, Tab, Carriage Return, Line Feed]\nThe characters can be escaped as per the list available at this link: http://www.theukwebdesigncompany.com/articles/entity-escape-characters.php",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to link injection attack",
        "severity": "High",
        "ref": "",
        "desc": "Link Injection is the act of modifying the content of a site by embedding in it a URL to an external site, or to a script in the vulnerable site. By embedding a URL in the vulnerable site, an attacker is then able to use it as a platform to launch attacks against other sites, as well as against the vulnerable site itself. Some of these possible attacks require the user to be logged in to the site during the attack. By launching these attacks from the vulnerable site itself the attacker increases the chances of success, because the user is more likely to be logged in. The Link Injection vulnerability is a result of insufficient user input sanitation, which is later returned to the user in the site response. The ability to inject hazardous characters into the response makes it possible for attackers to embed URLs, among other possible content modifications. ",
        "impact": "An Attacker can execute code in a victim\u2019s browser and can perform malicious activity, posing serious security threat to the application.",
        "rec": "Create a white-list of characters needed by the application. Once this white-list is ready the application should disallow all requests containing any other character apart from the white-list. The application should not accept any script, special characters, html in fields whenever not required. It should escape the special characters that may prove to be harmful. Following are some of the main characters used in scripts that must be escaped:\n< > ( ) ' \"\" / \\ *; = { } ` (back tick) % + ^! - \\x00-\\x20 (x is hexadecimal notation) [Includes Space, Tab, Carriage Return, Line Feed]\nThe characters can be escaped as per the list available at this link: http://www.theukwebdesigncompany.com/articles/entity-escape-characters.php",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to iframe injection",
        "severity": "High",
        "ref": "",
        "desc": "In an Iframe injection attack, the attacker exploits a specific cross-frame-scripting bug in a web browser to access private data on a third-party website. The attacker induces the browser user to navigate to a web page the attacker controls; the attacker's page loads a third-party page in an HTML frame; and then javascript executing in the attacker's page steals data from the third-party page. Iframe Injection is also sometimes is used to describe an XSS attack which uses an HTML frame in the attack. For example, an attacker might exploit a Cross Site Scripting Flaw to inject a frame into a third-party web page; or an attacker might create a page which uses a frame to load a third-party page with an XSS flaw.",
        "impact": "An Attacker can execute code in a victim\u2019s browser and can perform malicious activity, posing serious security threat to the application.",
        "rec": "Create a white-list of characters needed by the application. Once this white-list is ready the application should disallow all requests containing any other character apart from the white-list. The application should not accept any script, special characters, html in fields whenever not required. It should escape the special characters that may prove to be harmful. Following are some of the main characters used in scripts that must be escaped:\n< > ( ) ' \"\" / \\ *; = { } ` (back tick) % + ^! - \\x00-\\x20 (x is hexadecimal notation) [Includes Space, Tab, Carriage Return, Line Feed]\nThe characters can be escaped as per the list available at this link: http://www.theukwebdesigncompany.com/articles/entity-escape-characters.php",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application displays web server banner",
        "severity": "Low",
        "ref": "",
        "desc": "HTTP responses from the web server reveal information about the type and version of the web server, which can be used by an attacker.",
        "impact": "An attacker can use this information to launch further attacks.",
        "rec": "Remove default banner wherever possible.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to browser's back refresh attack.",
        "severity": "Medium",
        "ref": "",
        "desc": "Refresh feature in browser is used for convenience of the user although it can be used for capturing important user credentials from the browser by resubmitting the request for the page for which refresh is done. ",
        "impact": "An attacker can misuse the legitimate user\u2019s sensitive information.",
        "rec": "Introduce an intermediate page after sensitive pages like Login page, change password page etc. Look for redirection status (302 codes) and Redirect user back to landing page if he presses back button. Once user logs out automatically close the tab of the application.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application does not have a strong password policy",
        "severity": "Medium",
        "ref": "",
        "desc": "Application does not impose password policy properly, such as password complexity is not maintained, password length is not strong, history is not maintained, etc.",
        "impact": "Valid user's account can be compromized because of weak password policy. ",
        "rec": "The application should ensure that:\n1. Password history should be maintained.\n2. Password should contain alphanumeric characters and special characters as well.\n3. Password should not be same as userid.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Valid account can be brute forced",
        "severity": "Medium",
        "ref": "",
        "desc": "It was observed that the user account can be brute forced as account does not get locked after 5 invalid attempts. An attacker who knows a valid user\u2019s username can enter guess the password of the valid user's account",
        "impact": "An attacker can guess the password of valid user and can login into the application.",
        "rec": "Following are the generic ways to mitigate this attack\n1) Implement account lockout policy\n2) lock out an IP address with multiple failed logins\n3)  Most Web sites return an \"HTTP 401 error\" code with a password failure, although some web sites instead return an \"HTTP 200 SUCCESS\" code but direct the user to a page explaining the failed password attempt\n4) After one or two failed login attempts, you may want to prompt the user not only for the username and password but also to answer a secret question or CAPTCHA\n5) Instead of completely locking out an account, place it in a lockdown mode with limited capabilities.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Session Fixation Attack.",
        "severity": "Medium",
        "ref": "",
        "desc": "Session Fixation is an attack that permits an attacker to hijack a valid user session. Session Fixation is an attack technique that forces a user's session ID to an explicit value. Attacker fixes the session ID value. After a user's session ID has been fixed, the attacker will wait for that user to login. Once the user does so, the attacker uses the predefined session ID value to assume the same online identity.",
        "impact": "An attacker can misuse the legitimate user\u2019s session and can hijack the valid user\u2019s session",
        "rec": "Regenerate a new session upon successful authentication. Any session token used prior to login should be discarded and only the new token should be assigned for the user till the user logs out. This session token should be properly invalidated when the user logs out.guess a valid session key through trial and error or brute force attacks.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Session Hijacking",
        "severity": "High",
        "ref": "",
        "desc": "The Session Hijacking attack consists of the exploitation of the web session control mechanism, which is normally managed for a session token. The Session Hijacking attack compromises the session token by stealing or predicting a valid session token to gain unauthorized access to the Web Server. It is the act of taking control of a user session after successfully obtaining or generating an authentication session ID. Session hijacking involves an attacker using captured, brute forced or reverse-engineered session IDs to seize control of a legitimate user's Web application session while that session is still in progress.",
        "impact": "An attacker can misuse the legitimate user\u2019s session and can hijack the valid user\u2019s session.",
        "rec": "Encryption of the data passed between the user and the web servers, specially the session key or using a long random number or string as the session key. This reduces the risk that an attacker could guess a valid session key through trial and error or brute force attacks.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Improper Session Management.",
        "severity": "Medium",
        "ref": "",
        "desc": "Proper authentication and session management is critical to web application security. Flaws in this area frequently involve the failure to protect credentials and session tokens through their lifecycle. These flaws can lead to the hijacking of user or administrative accounts, undermine authorization and accountability controls, and cause privacy violations.",
        "impact": "An attacker can misuse the legitimate user\u2019s session and hijack the valid user\u2019s session\n",
        "rec": "Regenerate a new session upon successful authentication. Any session token used prior to login should be discarded and only the new token should be assigned for the user till the user logs out. This session token should be properly invalidated when the user logs out. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application's autocomplete feature is enabled on sensitive field.",
        "severity": "Low",
        "ref": "",
        "desc": "When a Login ID and password is entered and the form is submitted, the browser asks if the password should be saved.Thereafter when the form is displayed, the Login ID and password are filled in automatically or are completed as the Login is entered. (if critical information then LOW,else Info)",
        "impact": "An attacker with local access could obtain the cleartext password from the browser cache.",
        "rec": "The password auto-complete should be disabled in sensitive fields. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is Vulnerable to Credential/Session Prediction attack",
        "severity": "Medium",
        "ref": "",
        "desc": "Credential/Session Prediction is a method of hijacking or impersonating a web site user. Deducing or guessing the unique value that identifies a particular session or user accomplishes the attack. Also known as Session Hijacking, the consequences could allow attackers the ability to issue web site requests with the compromised user's privileges.\n\nCommunication between the user and the web site is tagged with the session ID as \"\"proof\"\" of the authenticated session. If an attacker is able predict or guess the session ID of another user, fraudulent activity is possible.\"",
        "impact": "An attacker can predict valid user's session cookie and can hijack the session to perform malicious activity on behalf of valid user.",
        "rec": "Never use self written algorithms for generating the session id. If developer has to use self - written algorithm, then always use complex algorithm to create a random session id. Always prefer to use technology inbuilt algorithm.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Password can be stolen using forgot password feature",
        "severity": "Medium",
        "ref": "",
        "desc": "An attacker can exploit wealky implemented forgot password feature by stealing the clear text password sent, or by exploiting the token generated, or by exploting the weak security questions.",
        "impact": "An attacker can steal the valid user's password and can use it to login into the application",
        "rec": "Implement Strong security questions, send encrypted newly generated password, generate random password, token must be expire after one use and it should be random",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to privilege escalation attack.",
        "severity": "High",
        "ref": "",
        "desc": "Privilege escalation means a user receives privileges, he is not entitled to. These privileges can be used to delete files, view private information, or install unwanted programs, such as viruses. It usually occurs when a system has a bug that allows security to be bypassed, or alternatively, has flawed design assumptions about how it will be used",
        "impact": "An attacker can use this attack to view the information of another user\u2019s account and can also perform malicious activity.",
        "rec": "Implement server side mapping of user to accessibility. The features applicable to different privilege levels should to accessible strictly to those level users only. Any other user should not be granted access to it. Implement access control matrix.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "NTLM  Authentication is used in the Application",
        "severity": "Medium",
        "ref": "",
        "desc": "NTLM is widely deployed, even on new systems, often for compatibility with older systems. But it remains vulnerable to a credentials forwarding attack, which is a variant on the reflection attack which was addressed by Microsoft security update MS08-068. Both attacks were discovered by Dominique Brezinski in 1997. For example, Metasploit can be used in many cases to obtain credentials from one machine which can be used to gain control of another machine. The Squirtle toolkit can be used to leverage web site cross-site scripting attacks into attacks on nearby assets via NTLM. In February 2010, Amplia Security discovered several flaws in the Windows implementation of the NTLM authentication mechanism which completely broke the security of the protocol allowing attackers to gain read/write access to files and remote code execution. ",
        "impact": "Login credentials could be retrieved by a malicious user.",
        "rec": "Avoid using of NTLM authentication, instead of using it, use more secure authentication method like NTLMv2.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Path attribute not set in session cookie",
        "severity": "Low",
        "ref": "",
        "desc": "If the path attribute is set too loosely, then it could leave the application vulnerable to attacks by other applications on the same server. For example, if the path attribute was set to the web server root \"/\", then the application cookies will be sent to every application within the same domain.",
        "impact": "One can get access to other application irrespective of the user is authorized to access those applications",
        "rec": "Configure the application to set a cookie only for a specific application path.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Session timeout is not set properly.",
        "severity": "Low",
        "ref": "",
        "desc": "The Timeout property specifies the time-out period assigned to the Session object for the application, in minutes. If the user does not refresh or request a page within the time-out period, the session ends. It was observed that the application doesn't terminate the session automatically even if the user session is inactive for a prolonged period after login.",
        "impact": "An attacker can get access to valid user's session and can hijack valid user\u2019s  session",
        "rec": "Implement session timeout after about 15 minutes.\nImplement session timeout after about 10 minutes (for Banking Sites)",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Secure flag is not set in session cookie.",
        "severity": "Low",
        "ref": "",
        "desc": "The secure parameter is a flag indicating that a cookie should only be used under a secure server condition, such as SSL.",
        "impact": "An attacker can misuse the session cookie of the valid user",
        "rec": "Set secure flag in session cookie.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "HTTPOnly attribute not set in session cookie.",
        "severity": "Low",
        "ref": "",
        "desc": "HTTPOnly is an addition flag in cookie response header which helps in restricting scripts accessing restricted cookies. In absence of HTTPOnly attribute in the set-cookie parameter, an attacker can exploit this vulnerability to gain information stored in cookie or can launch theft of modification attack by using malicious scripts",
        "impact": "An attacker can steal sensitive information like session cookie and can use it to craft other attacks",
        "rec": "Enable HTTPOnly feature for session cookies.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Session token going in other part other than Cookie.",
        "severity": "Low",
        "ref": "",
        "desc": "As session token is not going only in Cookie it can be stolen and used for session hijacking attack",
        "impact": "As session token is not going only in Cookie it can be stolen and used for session hijacking attack",
        "rec": "Session cookie should only go in Session cookie field",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to simultaneous login.",
        "severity": "Low",
        "ref": "",
        "desc": "Application allows the same user to login simultaneously from different location at the same time.",
        "impact": "An attacker can perform malicious activities on behalf of a valid user.",
        "rec": "Simultaneous login should be disabled. User should only be able to  login from one place at a time.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "The application does not log off users on suspicious requests(Critical Application)",
        "severity": "Low",
        "ref": "",
        "desc": "The application does not forcefully terminate a user's session even when the user tries to attack the application. This enables an adversary find weakness in the application.",
        "impact": "An attacker can try to attack the application and compromize it",
        "rec": "The safest practice is to terminate the user's session and log the details of the request whenever a user's request is suspicious and define a set of events that the application will detect and forcefully log out the user. Here're some events that many secure applications consider suspicious. When these events occur, the application terminates the user session and logs the event details for administrators to review.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Directory Traversal Attack",
        "severity": "High",
        "ref": "",
        "desc": "Any web application restricts its users from accessing data outside the site's root directory. This restriction can sometimes be overcome by a directory traversal attack. In this attack, the adversary uses a series of \"../\" to step out of the root folder and access other folders/files. Files like /etc/passwd in UNIX and the system files in Windows can be accessed by this attack.",
        "impact": "An attacker can steal sensitive information from the unrestricted directories and use this to craft other attacks.",
        "rec": "1) Each user should connect to a directory hierarchy that cannot be traversed to the system or any other user.\n2)Strong Input validation.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Restricted Files can be viewed by Directory Listing.",
        "severity": "Low",
        "ref": "",
        "desc": "Internet browsers permit users to randomly access directories on the Web server. It is sometimes used to offer files easily on the internet, but if unintended, it can allow an attacker to gain valuable information about your site. To prevent users from locating and accessing files disable directory browsing on the Web server.",
        "impact": "An attacker can get access to restricted files and folders and use that information to craft other attacks.",
        "rec": "Make sure the directory does not contain sensitive information or you may want to restrict directory listings from the web server configuration.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to CSRF attack",
        "severity": "High",
        "ref": "",
        "desc": "CSRF is an attack which forces an end user to execute unwanted actions on a web application in which he/she is currently authenticated. With a little help of social engineering (like sending a link via email/chat), an attacker may force the users of a web application to execute actions of the attacker's choice. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.",
        "impact": "An attacker can trick the valid targeted user to perform certain actions in the application and the victim will not be aware of transactions made from his/her account.",
        "rec": "\u2022 Any state changing operation requires a secure random token (e.g., CSRF token) to prevent CSRF attacks\nCharacteristics of a CSRF Token\n- Unique per user session\n- Large random value\n- Generated by a cryptographically secure random number generator \nThe CSRF token is added as a hidden field for forms.\nThe server rejects the requested action if the CSRF token fails validation\n\u2022 If storing the CSRF token in session is problematic, an alternative defense is use of a double submit cookie. A double submit cookie is defined as sending a random value in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Malicious file can be uploaded on the server.",
        "severity": "High",
        "ref": "",
        "desc": "Case 1 :The application has an option to upload files. Here the application only allows specific files to be uploaded but inspite of the restriction an adversary is able to upload a malicious file to the web server as validation is not done properly \nCase 2: Instead of simply checking the extension string present in the filename, the developer is extracting the file extension by looking for the \u2018.\u2019 character in the filename, and extracting the string after the dot character.",
        "impact": "An attacker can upload malicious files on server and can able to execute his malicious intention and compromise the security of the application.",
        "rec": "\u2022 Server Side Validation. Have a server side validation routine which performs filtering based on:\na) File extensions\nb) Content-Types\nc) Magic Numbers\nd) File Size.\n\u2022 Strongly Validate user input. using \"accept known good\" as a strategy\n\u2022 Check user supplied files or filenames. Cannot obviate other controls such as tainting data in the session object, avatars and images, PDF reports, Temporary files, and so on.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "HTTP Methods enabled on server(HEAD, PUT, DELETE, TRACE, TRACK, OPTIONS, DEBUG, PROPFIND).",
        "severity": "Low",
        "ref": "",
        "desc": "HTTP offers a number of methods that can be used to perform actions on the web server. Many of theses methods are designed to aid developers in deploying and testing HTTP applications. These HTTP methods can be used for nefarious purposes if the web server is misconfigured.",
        "impact": "HTTP methods can potentially pose a security risk for a web application, as they allow an attacker to modify the files stored on the web server.",
        "rec": "Disable HTTP Methods(HEAD, PUT, DELETE, TRACE, TRACK, OPTIONS, DEBUG, PROPFIND).",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Arbitrary Methods enabled on server.",
        "severity": "Low",
        "ref": "",
        "desc": "HTTP offers a number of methods that can be used to perform actions on the web server. Sometimes, applications are designed for \u00a0verb-based authorization and access control. An attacker can manipulate the these verbs to bypass the security controls.",
        "impact": "An attacker can use this information to craft further attacks.",
        "rec": "If the application does not support the Random method, it should issue an error page (or preferably a 405 Not Allowed or 501 Not implemented error page). ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application's Apache Server - Status Enabled.",
        "severity": "Medium",
        "ref": "",
        "desc": "An attacker can gather useful information about the internals of the target web server, including: \n-Server current configuration \n-Server version \n-Server build time \n-Server root \n-Server httpd.conf configuration file path \n-Server build parameters \n-Apache modules and module directives \nThis type of information can help an attacker to harvest information on the target in order to further develop the attack surface. ",
        "impact": "Leads to information disclosure which includes infomation such as Server uptime, Individual request-response statistics and CPU usage of the working processes, Current HTTP requests, client IP addresses, requested paths, processed virtual hosts. , that could give a potential attacker information about how to attack the web server.",
        "rec": "Don't allow Apache Server mod_status\u00a0Publicly Accessible and for that administrator need to just do few changes in the configuration file of apache (httpd.conf).\u00a0Additionally it is recommended to comment out the section from Apache configuration file httpd.conf.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Failure to Restrict URL Access.",
        "severity": "Medium",
        "ref": "",
        "desc": "Applications are not always protecting page requests properly. Sometimes, URL protection is managed via configuration, and the system is misconfigured. Also code level protection can be used.",
        "impact": "Anonymous users could access private pages that aren't protected.",
        "rec": "Access control checks must be performed before a request to a sensitive function is granted, which ensures that the user is authorized to access that function.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Re-direction attack.",
        "severity": "High",
        "ref": "",
        "desc": "The URL redirection service is the web technique for pointing a web page to another URL of your choice. In this attack an attacker can change the stored redirection URL to the malicious URL of his choice and if user clicks on that link he will become the victim by visiting the fake site.",
        "impact": "An attacker can make a valid user to visit site of his choice and compromise the security of the valid user.",
        "rec": "1. Sanitize input by creating a list of trusted URL's (lists of hosts or a regex).\n2. Force all redirects to first go through a page notifying users that they are going off of your site, and have them click a link to confirm.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Sensitive data stored in unencrypted viewstate .",
        "severity": "Low",
        "ref": "",
        "desc": "ViewState allows the state of objects to be stored in a hidden field on the page. ViewState is transported to the client and back to the server, and is not stored on the server or any other external source. ViewState is used the retain the state of server-side objects between postabacks.",
        "impact": "An attacker can trick the valid targeted user to perform certain actions in the application and the victim will not be aware of transactions made from his/her account.",
        "rec": "Encrypt the sensitive information in viewstate.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Password staying in browser memory  in cleartext.",
        "severity": "Low",
        "ref": "",
        "desc": "The request on the login page containing the username and password of the user is also stored in the browser's memory. The browser\u2019s memory can be read with the use of memory reading tools. So if a user left his browser window open after logout, an adversary can steal the password from the memory.",
        "impact": "One can steal username and password from browser\u2019s memory and can use to login into the application.",
        "rec": "The password can be read from the memory if it is being sent in cleartext. Using the salted hash technique for password transmission will solve this issue.                                                              \u2022 Do not create cryptographic algorithms. Only use approved public algorithms such as AES, RSA public key cryptography, and SHA-256 or better for hashing\n\u2022 Do not use weak algorithms, such as MD5 / Sha1. Favor safer alternatives, such as SHA-256 or better\n\u2022 Ensure that encrypted data stored on disk is not easy to decrypt.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Sensitive Information Sent Over Unencrypted Channel.",
        "severity": "Medium",
        "ref": "",
        "desc": "Applications frequently fail to encrypt network traffic when it is necessary to protect sensitive communications. Encryption (usually SSL) must be used for all authenticated connections, especially Internet-accessible web pages and backend connections as well. Otherwise, the application will expose an authentication or session token. In addition, encryption should be used whenever sensitive data, such as credit card or health information is transmitted. Applications that fall back or can be forced out of an encrypting mode can be abused by attackers.(High if critical application)",
        "impact": "An attacker can steal the sensitive information from the network and can use that for fulfillment of his other malicious purpose.",
        "rec": "Use SSL for all connections that are authenticated or transmitting sensitive or value data, such as credentials, credit card details, health and other private information. All requests from the user to a HTTP URL must be redirected to a HTTPS URL instead.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to BEAST attack.",
        "severity": "Low",
        "ref": "",
        "desc": "Browser Exploit Against SSL/TLS(BEAST), that leverages weaknesses in cipher block chaining (CBC) to exploit the Secure Sockets Layer (SSL) protocol. The CBC vulnerability can enable man-in-the-middle (MITM) attacks against SSL in order to silently decrypt and obtain authentication tokens, providing attacker with access to the data passed between a Web server and the Web browser accessing the server.SSL BEAST attacks affect only the Transport Layer Security (TLS) 1.0 version of SSL.",
        "impact": "An attacker can steal user\u2019s sensitive information by implementing Man-in-the-Middle attack within the same network.",
        "rec": "Upgrade to TLSv1.2 and Remove CBC from prefered cipher suite.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application supports weak ciphers/Encoding.",
        "severity": "Low",
        "ref": "",
        "desc": "A cipher is an algorithm for performing encryption or decryption \u2014 a series of well-defined steps that can be followed as a procedure. When using a cipher the original information is known as plaintext, and the encrypted form as ciphertext. The ciphertext message contains all the information of the plaintext message, but is not in a format readable by a human or computer without the proper mechanism to decrypt it; it should resemble random gibberish to those not intended to read it.",
        "impact": "An attacker can decrypt the traffic and can steal sensitive information.\n",
        "rec": "Implement strong cipher algorithm",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Older version of SSL supported.",
        "severity": "Low",
        "ref": "",
        "desc": "The remote service encrypts traffic using an old deprecated protocol with known weaknesses. ",
        "impact": "An attacker may be able to exploit these issues to conduct man-in-the-middle attacks or decrypt communications between the affected service and clients. ",
        "rec": "Upgrade older version of SSL to TLSv1.2.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Server is vulnerable to MITM attacks because it supports insecure renegotiation\n",
        "severity": "Low",
        "ref": "",
        "desc": "A vulnerability in the way SSL and TLS protocols allow renegotiation requests may allow an attacker to inject plaintext into an application protocol stream. This could result in a situation where the attacker may be able to issue commands to the server that appear to be coming from a legitimate source. This issue affects SSL version 3.0 and newer and TLS version 1.0 and newer.\n",
        "impact": "A remote, unauthenticated attacker may be able to inject an arbitrary amount of chosen plaintext into the beginning of the application protocol stream. This could allow and attacker to issue HTTP requests, or take action impersonating the user, among other consequences.\n",
        "rec": "Users should contact vendors for specific patch information.\nReference:\nhttp://www.g-sec.lu/practicaltls.pdf\n",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Server is easier to attack via DoS because it supports client-initiated renegotiation\n",
        "severity": "Low",
        "ref": "",
        "desc": "The SSL-handshake is only done at the beginning of a secure session and only if security is required. Servers are not prepared to handle large amount of SSL Handshakes\n",
        "impact": "An attacker can perform DoS attack by requesting many new SSL connections per second,using all server's CPU\n",
        "rec": "Weak cipher suites should be disabled\nhttps://github.com/zotonic/zotonic/issues/531\n",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Server is vulnerable to CRIME attack.",
        "severity": "Low",
        "ref": "",
        "desc": "Compression Ratio Info-leak Made Easy (CRIME) is a security exploit against secret web cookies over connections using the HTTPS and SPDY protocols that also use data compression\n",
        "impact": "An attacker can perform session hijacking on an authenticated web session, allowing the launching of further attacks.\n",
        "rec": "CRIME can be defeated by preventing the use of compression, either at the client end, by the browser disabling the compression of HTTPS requests, or by the website preventing the use of data compression on such transactions using the protocol negotiation features of the TLS protocol.\n",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "SSL certificate invalid date.",
        "severity": "Low",
        "ref": "",
        "desc": "This SSL certificate is either expired or not yet valid. Some browsers will continue connecting to the site after presenting the user with the warning, while others will prompt the user with a dialog box requesting their approval to proceed. These warnings are extremely confusing for the typical web user, and cause most users to question the authenticity of the site they are attempting to view.",
        "impact": "SSL certificate will be not valid.",
        "rec": "Verify Start Date and End Dates of your SSL Certificate.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application's source code reveals sensitive information.",
        "severity": "Low",
        "ref": "",
        "desc": "Sensitive information related to the application logic is stored in the files like webresource.axd and scriptresource.axd. These files contain details of the various functions and its parameters that are used in the applications. Obtaining this, grants the attacker deeper knowledge of the logic behind the Web application, how the application handles requests and their parameters, the structure of the database, vulnerabilities in the code and source code comments.",
        "impact": "An attacker can use this information to analyze the business logic and flow of the application, and can craft further attacks.",
        "rec": "Normal users should not be given access to the file that may contain sensitive information about the application.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application accepts special character as user input.",
        "severity": "Low",
        "ref": "",
        "desc": "Application allows user to enter special character in input fields.",
        "impact": "An attacker can insert special characters, and launch attacks such as SQL injection, XSS, etc.",
        "rec": "Implement server side validation ensuring that only expected data is accepted by the application.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "CAPTCHA not implemented properly.",
        "severity": "Medium",
        "ref": "",
        "desc": "Automated programs can be used to fill the forms such as registration page to send large number of requests in short time to bring down the server and make it unavailable for users. A CAPTCHA is a program that can generate and grade tests that humans can pass but current computer programs cannot. For example, humans can read distorted text but current computer programs can't.",
        "impact": "An attacker can use automated tools to bring down the server or CAPTCHA can be bypassed.",
        "rec": "Implement captcha properly, with proper server side validation wherein an attacker cannot manipulate the CAPTCHA value, for registration page, feedback page or any prelogin form page to avoid automated attacks.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Automated tools can be used to bring down the server.",
        "severity": "Medium",
        "ref": "",
        "desc": "Automated programs can be used to fill the forms such as registration page to send large number of requests in short time to bring down the server and make it unavailable for users. A CAPTCHA is a program that can generate and grade tests that humans can pass but current computer programs cannot. For example, humans can read distorted text but current computer programs can't.",
        "impact": "Bots can be used to attack the application and make it unavailable for other users.",
        "rec": "Implement captcha properly, wherein an attacker cannot manipulate the CAPTCHA value, for registration page to avoid automated attacks.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Email ids can be harvested for spamming.",
        "severity": "Low",
        "ref": "",
        "desc": "The web site displays email addresses on publically available pages in clear text. Automated programs called bots could be used to harvest these email addresses  and then used as targets for spamming.",
        "impact": "Bots can use cleartext email id to send spam mail.",
        "rec": "By obfuscating email addresses using Javascript they can be protected from bots or using image instead of plain text. \nEg: abc[at]xyz[dot]com",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Sensitive data exposed in URLs(GET)",
        "severity": "Low",
        "ref": "",
        "desc": "The GET of every web page you visit is recorded in your browser history file. An attacker can steal sensitive information from the history of the browser.",
        "impact": "An attacker can steal sensitive information from the history of the browser.",
        "rec": "Sensitive information should not be sent in a GET request. All the sensitive information should be sent in POST request.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Sensitive Information gets stored in Cache.",
        "severity": "Low",
        "ref": "",
        "desc": "Cache is a component that transparently stores data so that future requests for that data can be served faster. The data that is stored within a cache might be values that have been computed earlier or duplicates of original values that are stored elsewhere. If requested data is contained in the cache, this request can be served by simply reading the cache, which is comparatively faster. Sometimes pages with sensitive information also stored in cache which can be used by an attacker. ",
        "impact": "An attacker can steal sensitive information from the pages which get stored in the cache memory.",
        "rec": "Implement cache control attributes to prevent pages from getting stored in the cache. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Error message reveals sensitive information.",
        "severity": "Low",
        "ref": "",
        "desc": "The application does not handle all errors properly. Some error messages contain information about the application. The application generates an error message that includes sensitive information about its environment, users, or associated data. ",
        "impact": "Information revealed by error message can be useful for carrying out more focused attacks.",
        "rec": "Implement customized error message which do not reveal any information about the application.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to ClickJacking attack.",
        "severity": "Medium",
        "ref": "",
        "desc": "Clickjacking is a malicious technique of tricking Web users into revealing confidential information or taking control of user computer while clicking on seemingly innocuous Web pages. A click jacked page tricks a user into performing undesired actions by clicking on a concealed link. On a click jacked page, the attackers show a set of dummy buttons, and then load another page over it in a transparent layer. The users think that they are clicking the visible buttons, while they are actually performing actions on the hidden page. The hidden page may be an authentic page, and therefore the attackers can trick users into performing actions which the users never intended to do and there is no way of tracing such actions later, as the user was genuinely authenticated on the other page.",
        "impact": "An attacker can trick the valid targeted user to perform certain actions in the application and the victim will not be aware of transactions made from his/her account.",
        "rec": "Add X-FRAME header option in HTTP header response with \u2018SAME ORIGIN\u2019 or \u2018DENY\u2019  or set X-Frame-Options: ALLOW-FROM https://example.com/.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Cross site flashing",
        "severity": "High",
        "ref": "",
        "desc": " Cross-Site Flashing occurs when user controlled data is not validated and used in one of the following functions or variables:\n    loadVariables\n    loadMovie\n    getURL\n    loadMovie\n    loadMovieNum\n    FScrollPane.loadScrollContent\n    Sound.loadSound\n    NetStream.play\n    flash.external.ExternalInterface.call\n    htmlText\nIn other words, this means that the Flash application must reference external URLs, and the locations of those URLs are set through user defined parameters (usually Flash Vars). ",
        "impact": "An Attacker can execute code in a victim\u2019s browser and can perform malicious activity, posing serious security threat to the application.",
        "rec": "The following recommendations will help to mitigate the risk of Cross-Site Flashing:\n1)   Avoid loading external flash content based on user input given in \u201cflashvars\u201d. But if it is unavoidable, employ strict checks of input validation in the flash content code.\n2)    If loading external flash content is unavoidable, your flash content should maintain a white list of domains, content from which is allowed to be loaded.\n3)   Object tag embedding a flash movie should not have AllowScriptAccess set to \u2018always\u2019. Value of AllowScriptAccess should be either \u2018sameDomain\u2019 or \u2018never\u2019. Also, value of AllowScriptAccess should be explicitly set. Default value should not be used.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Older version of ASP/ASP.Net/PHP/Java/Apache/ IIS (whichever applicable) found.",
        "severity": "Medium",
        "ref": "",
        "desc": "HTTP responses from the web server reveal information about the type and version of the web server. Application is using older version of ASP/ASP.Net/PHP/Java/Apache/ IIS  an attacker can misuse the flaws present in the older version of ASP/ASP.Net/PHP/Java/Apache/ IIS (whichever applicable).",
        "impact": "An attacker can exploit the publicly known vulnerabilities of the older ASP/ASP.Net/PHP/Java/Apache/ IIS (whichever applicable) version.",
        "rec": "Upgrade to latest version of  ASP/ASP.Net/PHP/Java/Apache/ IIS .",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Robots.txt found on site",
        "severity": "Low",
        "ref": "",
        "desc": "The robots.txt file is commonly placed in the root directory of a system's Web server to control the actions of Web robots (often called crawlers or spiders). All robots that adhere to the Robots Exclusion Standard (see References) will check this file on your server before proceeding to index or search your site. A user who is able to modify the contents of the robots.txt file could control the actions of Web robots on your server.",
        "impact": "An attacker can misuse the information available at the page to craft other attacks.",
        "rec": "Remove the file if site doesn\u2019t need it or administrators should review the contents of the robots.txt file to check if the information is consistent with the policies of their organization.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Internal IP disclosure.",
        "severity": "Low",
        "ref": "",
        "desc": "A string matching an internal IPv4 address was found on this page. This may disclose information about the IP addressing scheme of the internal network. ",
        "impact": "An attacker can misuse the information available at the page to craft other attacks.",
        "rec": "Prevent this information from being displayed to the user.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application does not display Last login time and date. (critical application)",
        "severity": "Low",
        "ref": "",
        "desc": "As a security best practise last login time and date and transactions done must be displayed when user logs into the application so that unauthorized activities should not go unnoticed.",
        "impact": "Malicious activities can get unnoticed.",
        "rec": "Display last login time, date and last transaction after login page.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Default web page found on the application server.",
        "severity": "Low",
        "ref": "",
        "desc": "Every website is built inside directories on a Web server. And each Web page is a separate file on that Web server. But sometimes, when you go to a URL, there is no file listed in the URL.But there is still a file that the Web server needs to serve in order for that URL to display anything other than an error page. This file is the default page for that directory.",
        "impact": "An attacker can misuse the information available at the page to craft other attacks.",
        "rec": "Remove default page.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is accessible by IP address.",
        "severity": "Low",
        "ref": "",
        "desc": "A server is serving the home page if accessed by the IP address. The server should not allow this as worms who scan for IP address randomly can spot the site.",
        "impact": "Bots can search for the application and can target it for attacks.",
        "rec": "Application should only be accessed by domain name.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Using Known Vulnerable Components",
        "severity": "Low",
        "ref": "",
        "desc": "It is very common for application to include a component with a known security vulnerability. The component with a known vulnerability could be the operating system itself, the CMS used, the web server, some plugin installed or even a library used by one of these plugins",
        "impact": "The full range of weaknesses is possible, including injection, broken access control, XSS, etc. The impact could range from minimal to complete host takeover and data compromise. ",
        "rec": "The first step to get rid of vulnerabilities in the components you are using would be to always keep everything up to date. Build the system in a way that allows security patches to be installed in a timely manner.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Predictable Resource Location.",
        "severity": "Low",
        "ref": "",
        "desc": "Predictable Resource Location is an attack technique used to uncover hidden web site content and functionality. By making educated guesses via brute forcing an attacker can guess file and directory names not intended for public viewing.These files may disclose sensitive information about the website, web application internals, database information, passwords, machine names, file paths to other sensitive areas, etc.",
        "impact": "Any attacker can make arbitrary file or directory requests to any publicly available web server which  may disclose valuable information about the environment or its users",
        "rec": "If the forbidden resource is not required, remove it from the site. If possible, issue a \"404 -Not Found\" response status code instead of \"403 - Forbidden\".",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Mobile No can be ByPassed and used to perform critical transactions.",
        "severity": "Medium",
        "ref": "",
        "desc": "An application uses mobile number as authentication factor, to perform critical transactions providing secure login to users.",
        "impact": "An attacker can get unautorized access to application or modules and can perform activities on behalf of authorized users.",
        "rec": "Mobile number should be masked while displaying and stored / transmitted in encrypted form.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application's OTP can be ByPassed.",
        "severity": "Medium",
        "ref": "",
        "desc": "A one-time password (OTP) is a password that is used as second factor authenticator to perform critical transactions providing secure login to users.",
        "impact": "An attacker can access application or respective modules without being authenticated.",
        "rec": "Using OTP as a second factor authentication should be implemented in such  a way that it should not be compromised.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to payment manipulation attack",
        "severity": "Critical",
        "ref": "",
        "desc": "Application allows users to manipulate amount. The application does not verify the amount which is to be paid by the user. This allows an adversary to modify amount and do a transaction for lesser cost",
        "impact": "An attacker can perform a transaction for lesser amount than its original amount.",
        "rec": "Application should not allow amount to be manipulate amount.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Confirmatory second channel authentication(OTP/SMS/Email) procedures not applied for value transactions.",
        "severity": "Medium",
        "ref": "",
        "desc": "If transaction above pre-set values, creation of new account linkages, registration of third party payee details, changing account details or revision to funds transfer limits.",
        "impact": "An attacker can by pass single authentication and can craft other attacks.",
        "rec": "Application should include second factor authentication for value based transaction.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Poodle attack.",
        "severity": "Medium",
        "ref": "",
        "desc": "The POODLE attack (Padding Oracle On Downgraded Legacy Encryption) is a man-in-the-middle exploit which takes advantage of Internet and security software client's fallback to SSL 3.0.If attackers successfully exploit this vulnerability, on average, they only need to make SSL 3.0 requests to reveal one byte of encrypted messages.",
        "impact": "An attacker can decrypt the traffic and can steal sensitive information.",
        "rec": "The TLS Fallback SCSV mechanism prevents 'version rollback' attacks without impacting legacy clients however, it can only protect connections when the client and service support the mechanism. Sites that cannot disable SSLv3 immediately should enable this mechanism.\nThis is a vulnerability in the SSLv3 specification, not in any particular SSL implementation. Disabling SSLv3 is the only way to completely mitigate the vulnerability.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Internal Path disclosure",
        "severity": "Info",
        "ref": "",
        "desc": "Internal directory is disclosed publicily.",
        "impact": "An attacker can use this information to craft further attacks.",
        "rec": "It was observed that internal path is disclosed in the application.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "XML-RPC  is publicly available.",
        "severity": "High",
        "ref": "",
        "desc": "Xmlrpc is a set of implementations that allows software running on disparate operating system in different environments to make procedure calls over the internet. It uses HTTP to transport the data and XML as the encoding.",
        "impact": "Attacker can use this methods to craft a successful DOS attack against the application. There are various exploits in the market are publically available, which can be used by an attacker to leverage the presence of XML-RPC on the application server.",
        "rec": "The web application firewall should mitigate attacks by adding the following to .htaccess -file\n<Files xmlrpc.php>\nOrder allow,deny\nDeny from all\n</Files>",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to XST-Cross Site Tracing.",
        "severity": "Medium",
        "ref": "",
        "desc": "A Cross-Site Tracing (XST) attack involves the use of Cross-site Scripting (XSS) and the TRACK HTTP methods.TRACE allows the client to see what is being received at the other end of the request chain and use that data for testing or diagnostic information.The TRACE method, while apparently harmless, can be successfully leveraged in some scenarios to steal legitimate users' credentials.",
        "impact": " An attacker can successfully steal legitimate users' credentials.",
        "rec": "Disable Trace Method.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Replay Attack.",
        "severity": "Medium",
        "ref": "",
        "desc": "Replay attacks are the network attacks in which an attacker spies the conversation between the sender and receiver and takes the authenticated information e.g. sharing key and then contact to the receiver with that key. In Replay attack the attacker gives the proof of his identity and authenticity.",
        "impact": "An attacker can replay the already submitted request and can change bussiness logic functionality.",
        "rec": "1)A way to avoid replay attacks is by implementing session properly.\n2)One-time passwords are similar to session tokens in that the password expires after it has been used or after a very short amount of time\n3)Timestamping is another way of preventing a replay attack. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to HTTP Parameter pollution.",
        "severity": "Medium",
        "ref": "",
        "desc": "HTTP Parameter Pollution, pollutes the HTTP parameters of a web application in order to perform or achieve a specific malicious task/attack different from the intended behavior of the web application.",
        "impact": "An attacker can alter or modify the intended/normal application behavior or bypass WAFs rules or input validation mechanisms.",
        "rec": "In order to prevent these kinds of vulnerabilities, an extensive and proper input validation should be performed.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to an issue whereby requests submitted as \"POST\" requests can be converted to \"GET\" requests.",
        "severity": "Medium",
        "ref": "",
        "desc": "With GET requests, there are numerous ways for sensitive information to be exposed in clear text like browser history files, Referrer header fields, server, proxy and log files.",
        "impact": "With GET requests, there are numerous ways for sensitive information to be exposed in clear text like browser history files, Referrer header fields, server, proxy and log files. ",
        "rec": "Applications can be developed to only accept POST requests for the execution of business logic\nFor example, if you're expecting a variable named 'foo' via POST, in PHP using $_POST['foo'] rather than $_REQUEST['foo'] will remove the ambiguity.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Cross Origin Resource Sharing.",
        "severity": "Low",
        "ref": "",
        "desc": "The HTML5 cross-origin resource sharing policy controls whether and how content running on other domains can perform two-way interaction with the domain which publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request. If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user. Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by a third-party attacker to exploit the trust relationship and attack the application which allows access.",
        "impact": "Any malicious domain can perform two-way interaction with the application via CORS.",
        "rec": "You should review the domains which are allowed by the Cross-origin resource sharing policy in relation to any sensitive content within the application, and determine whether it is appropriate for the application to trust both the intentions and security posture of those domains. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Sweet32 attack.",
        "severity": "Low",
        "ref": "",
        "desc": "Current Firewall firmware still allows the use of 3DES for TLS connections and is therefore vulnerable to the SWEET 32 attack. Attacker sends dummy data to your server until a key used for a customer matches the attacker\u2019s session key. Once there\u2019s a match, sensitive data can be decrypted by determining how the key was chosen.",
        "impact": "An attacker who can monitor a long-lived Triple-DES HTTPS connection between a web browser and a website can recover secure HTTP cookies by capturing traffic.",
        "rec": "A hotfix has been made available for all current firmwares that will disable support of 3DES for TLS connections. Please contact tech support and request hotfix #177131 to fix this vulnerability. This hotfix will be included in all future firmware releases. \" (3DES/Blowfish) Unaffected firmware versions: 6.2.6.0-20n 6.2.6.1-25n 6.2.5.2-32n Affected firmware versions: 6.2.5.1-26n and below 6.1.1.12-41n and below 6.1.2.6-27n and below 5.9.1.7-2o and below 5.8.4.2-13o and below.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Remote file inclusion vulnerablity.",
        "severity": "Critical",
        "ref": "",
        "desc": "Remote File Inclusion (also known as RFI) is the process of including remote files through the exploiting of vulnerable inclusion procedures implemented in the application. This vulnerability occurs, for example, when a page receives, as input, the path to the file that has to be included and this input is not properly sanitized, allowing external URL to be injected. Although most examples point to vulnerable PHP scripts, we should keep in mind that it is also common in other technologies such as JSP, ASP and others.",
        "impact": "An attacker can get the access of the application server.",
        "rec": "Strong input validation can be used to prevent Remote file inclusion in an application. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to HTTP Host Header Injection.",
        "severity": "Medium",
        "ref": "",
        "desc": "Host header is used by a web server to decide which website should process the received HTTP request. So whenever multiple websites are hosted on the same IP address, web server uses the value of this header to forward the HTTP request to the correct website for processing.If the application relies on the value of the Host header for writing links without HTML-encoding, importing scripts, deciding the location to redirect to or even generate password resets links with its value without proper filtering, validation and sanitization then it can lead to several vulnerabilities like Cache Poisoning, Cross Site Scripting etc.",
        "impact": "This attack can lead to URL Redirection, Web Cache poisoning, Password Reset poisoning and XSS.",
        "rec": "1) Host header injection can be mitigated by rejecting any request that doesn't match the target domain.\n2) Validating Host header to ensure that the request is originating from that target host or not.\n3) Host header injection can be mitigated in Apache and Nginx by creating a dummy virtual host that catches all requests with unrecognized Host headers.\n4) By creating a whitelist of trusted domains during the initial setup of the application and mapping domains received in Host header of each and every request with it.\n5) It is recommended to disable the support for the X-Forwarded-Host header and if can\u2019t be disabled put proper security checks on it to prevent its tampering.\n6) One should use secure server configuration.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Shell can be upload to get application server access.",
        "severity": "Critical",
        "ref": "",
        "desc": "The application has an option to upload files. Here the application only allows specific files to be uploaded but inspite of the restriction an adversary is able to upload a shell to the web server as validation is not done properly .",
        "impact": "An attacker can get the access of the application server.",
        "rec": "\u2022 Server Side Validation. Have a server side validation routine which performs filtering based on:\na) File extensions\nb) Content-Types\nc) Magic Numbers\nd) File Size.\n\u2022 Strongly Validate user input. using \"accept known good\" as a strategy\n\u2022 Check user supplied files or filenames. Cannot obviate other controls such as tainting data in the session object, avatars and images, PDF reports, Temporary files, and so on.\n",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to CSV injection.",
        "severity": "High",
        "ref": "",
        "desc": "Application allow users to download data in a csv file, csv file suitable for handling in spreadsheet applications like Microsoft Excel and OpenOffice Calc. CSV feature is not properly escaping the fields, the resulting spreadsheet\u2019s cells often contain input from this allow an adversary to turn a field into active content so when a response team download the csv and open it, the active content gets executed.",
        "impact": "A vulnerability allows attackers to send malicious csv files on victim's system. By using the Microsoft Excel DDE function an attacker can launch arbritary commands on the victims system.",
        "rec": "Ensure that no cells begin with any of the following characters:\n\nEquals to (\u201c=\u201d)\nPlus (\u201c+\u201d)\nMinus (\u201c-\u201c)\nAt (\u201c@\u201d)\n\nThe developers can add apostrophe (\u2018) in the beginning of the cell containing such characters. Adding apostrophe (\u2018) tells excel that the cell doesn\u2019t contain formula and on viewing the MS Excel do not display apostrophe (\u2018) when entered as first character in the cell.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to SSRF/XSPA attack.",
        "severity": "High",
        "ref": "",
        "desc": "This vulnerability also known as Cross Site Port Attack, happens when an attacker has the ability to initiate requests from the affected server. An attacker can trick the web server that could probability running behind a firewall to send requests to itself to identify services running on it, or can even send out-bond traffic to other servers. ",
        "impact": "1)    Port scan intranet and external Internet facing servers\n2)    Fingerprint internal (non-Internet exposed) network aware services\n3)    Perform banner grabbing\n4)    Run code on reachable machines\n5)    Enumerate and attack services that are running on these hosts\n",
        "rec": "1) Display generic error messages to the client in case something goes wrong. If content type validation fails, display generic errors to the client like \u201cInvalid Data retrieved\u201d. Also ensure that the message is the same when the request fails on the backend and if invalid data is received. This will prevent the application from being abused as distinct error messages will be absent for closed and open ports. Under no circumstance should the raw response received from the remote server be displayed to the client.\n2) Validating responses received from remote resources on the server side is the most basic mitigation that can be readily implemented. If a web application expects specific content type on the server, programmatically ensure that the data received satisfies checks imposed on the server before displaying or processing the data for the client.\n3) Internal IP addresses, localhost specifications and internal hostnames can all be blacklisted to prevent the web application from being abused to fetch data/attack these devices.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "HTTPS and Mixed Content Vulnerability.",
        "severity": "Low",
        "ref": "",
        "desc": "HTTPS is used to make communication between the server and the browser secure. However, a problem occurs when an HTTPS page loads HTTP content: this is called mixed content vulnerability. (active/passive)",
        "impact": "HTTP is not secure, the attacker can launch a MITM (man-in-the-middle) attack. As a consequence, the attacker has an impact on the HTTP content that is delivered to the user\u2019s browser.",
        "rec": "All the Page should load only on Https",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application's hidden directory detected.",
        "severity": "Low",
        "ref": "",
        "desc": "Application's directory which should not be accessible by normal user is detected, the information may help an attacker to develop further attacks against the application.",
        "impact": "The information may help an attacker to develop further attacks against the application.",
        "rec": "If the forbidden resource is not required, remove it from the site. If possible, issue a \"404 -Not Found\" response status code instead of \"403 - Forbidden\". Use proper access control and data authentication.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Basic Authentication is used in the application.(used without SSL)",
        "severity": "Medium",
        "ref": "",
        "desc": "In the context of an HTTP transaction, basic access authentication is a method for an HTTP user agent to provide a user name and password when making a request.\n\nThis directory is protected using Basic Authentication over an HTTP connection. With Basic Authentication the user credentials are sent as cleartext and because HTTPS is not used, they are vulnerable to packet sniffing.",
        "impact": "An attacker can sniff the packet and decrypt the Basic auth using Man-in-the-Middle attack",
        "rec": "Use Basic Authentication over an HTTPS connection.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application throws ODBC/SQL error message.",
        "severity": "Medium",
        "ref": "",
        "desc": "The ODBC error message may disclose sensitive information and this information can be used by an attacker to mount new attacks or to enlarge the attack surface. In rare conditions this may be a clue for an SQL Injection vulnerability.  ",
        "impact": "Sensitive information revealed by error message can be used by the attacker to craft other attacks",
        "rec": "Do not provide any error messages on production environments. Save error messages with a reference number to a backend storage such as a text file or database, then show this number and a static user-friendly error message to the user. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Abuse of Send-Mail Functionality.",
        "severity": "Medium",
        "ref": "",
        "desc": " If an attacker can control the From, To, Subject, and Body of a message and there are no anti-automation controls in place email functions can be turned into spam-relay vehicles.",
        "impact": "Application Mail Server can be a victim of Spam email attack",
        "rec": "Web Applications that send mail must be careful to not allow the user complete control over message headers and content.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Server side validation not in place.",
        "severity": "Low",
        "ref": "",
        "desc": "Validations can be performed on the server side or on the client side. The user input validation take place on the Server Side during a post back session is called Server Side Validation. After the validation process on the Server Side, the feedback is sent back to the client by a new dynamically generated web page.",
        "impact": "An attacker can bypass the client side script and violate the business rule according to his/her preference",
        "rec": "It is better to validate user input on Server Side because you can protect against the malicious users, who can easily bypass your Client Side scripting language and submit dangerous input to the server. All through the application, for all fields, server side validation should be implemented along with the client side checks.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to CRLF/Response Spilliting attack.",
        "severity": "High",
        "ref": "",
        "desc": "CRLF (Carriage Return and Line Feed) is a very significant sequence of characters for programmers. These two special characters represent the End Of Line (EOL) marker for many Internet protocols. When programmers write code for web applications they split headers based on where the CRLF is found. If a malicious user is able to inject his own CRLF sequence into an HTTP stream, he is able to maliciously control the way a web application functions.",
        "impact": "An Attacker can provide specially crafted text streams with CRLF injections in order to trick the web application to perform unexpected and potentially harmful actions",
        "rec": "Validate input. Remove CRs and LFs (and all other hazardous characters) before embedding data into any HTTP response headers",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Self-Redirection.",
        "severity": "High",
        "ref": "",
        "desc": "This bug has huge potential for tricking domain that click on external links from the site to be a victim of a scam page because the redirecting is made in the background, while the user is focused on another tab. More then that, some browsers like Mozilla for Android don't even display the URL, just the page title, so the user has no way of knowing that he was redirected to a scam page.",
        "impact": "An attacker can make a valid user to visit site of his choice and compromise the security of the valid user",
        "rec": "Add [rel=\"noopener\"] this to your outgoing links. For Mozilla Firefox use [rel=\"noopener noreferrer\"] this to your outgoing links. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Email flooding attack",
        "severity": "Medium",
        "ref": "",
        "desc": "An Email Flooding is a form of net abuse consisting of sending huge volumes of email to an address in an attempt to overflow the mailbox or overwhelm the server where the email address is hosted in a denial-of-service attack.",
        "impact": "An attacker can send multiple email to victim which can lead to DOS attack.",
        "rec": " Implement captcha properly, wherein an attacker cannot send multiple emails through automated tools. ",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Programming language and version discloser.",
        "severity": "Low",
        "ref": "",
        "desc": "HTTP responses from the web server reveal information about the programming language being used in the application, which can be used by an attacker. ",
        "impact": "An attacker can use this information to launch further attacks",
        "rec": " Remove sensitive information wherever possible.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Insecure Direct Object References",
        "severity": "High",
        "ref": "",
        "desc": "Applications frequently use the actual name or key of an object when generating web pages. Applications don\u2019t always verify the user is authorized for the target object. This results in an insecure direct object reference flaw. Testers can easily manipulate parameter values to detect such flaws and code analysis quickly shows whether authorization is properly verified.",
        "impact": "Such flaws can compromise all the data that can be referenced by the parameter. It\u2019s easy for an attacker to access all available data of that type",
        "rec": " Preventing insecure direct object references requires selecting an approach for protecting each user accessible object (e.g., object number, filename):\n1)  Use per user or session indirect object references. This prevents attackers from directly targeting unauthorized resources. For example, instead of using the resource\u2019s database key, a drop down list of six resources authorized for the current user could use the numbers 1 to 6 to indicate which value the user selected. The application has to map the per-user indirect reference back to the actual database key on the server. \n 2) Check access. Each use of a direct object reference from an untrusted source must include an access control check to ensure the user is authorized for the requested object.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application's Request/Response reveals sensitive information",
        "severity": "Low",
        "ref": "",
        "desc": "Sensitive information in Request and Reponse should be encoded with proper technique with salting. Eg : Password, Account Details, Personal Identity information, Etc",
        "impact": "Attacker can decrypt the SSL traffic or find information in browser memory",
        "rec": "Use proper encoding technique with salting for sensitive field.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Pixel Flooding Attack",
        "severity": "High",
        "ref": "",
        "desc": "In the image itself exchange the heightxwidth with values 0xfafa x 0xfafa (so 64250x64250 pixels). Now, application tries to convert the image once uploaded. By loading the 'whole image' into memory, it tries to allocate 4128062500 pixels into memory, flooding the memory and causing DoS.\nAfter uploading the image and opening the website in a new tab it loads not/really slow.",
        "impact": "An attacker can perform DoS attack and can exploit the service availability.",
        "rec": "Set a maximum amount of pixels or width/height.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "The application stores the session ID in persistent cookies",
        "severity": "Low",
        "ref": "",
        "desc": "  Web applications use session IDs to identify user sessions. The session ID is set as a cookie for tracking the user sessions. These cookies are temporarily stored within the browser memory. When these cookies are persistent, they stay permanently in the users machine and can be stolen by an adversary who has access to the user&#39;s machine.",
        "impact": "An attacker use that persistance cookie to hijack valid user's session",
        "rec": "  Use nonpersistent cookies instead of persistent cookies.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "OTP time window exceeds 100 seconds",
        "severity": "Low",
        "ref": "",
        "desc": "A one-time password (OTP) is a password that is valid for only one login session or transaction for a shorter duration of time.",
        "impact": "An attacker can abuse OTP, since it is valid for longer duration.",
        "rec": "OTP timeout should be less than 3 minutes.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Log Injection",
        "severity": "Critical",
        "ref": "",
        "desc": "Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically calls logs for important events or trending information. In Log Injection attacker will be able to create a forged entry in the application log which reduces the value of the logs, and frustrates any forensic type activities.",
        "impact": "This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.",
        "rec": "1. Validate all input that could be put in the log file. This would involve doing strict whitelist validation to make sure that characters that pose issues in logs are not available to the attacker. \n2. Use synchronization to control the flow of execution.\n3. Use static analysis tools to identify log forging vulnerabilities.\n4. Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application accepts files with double extension",
        "severity": "Low",
        "ref": "",
        "desc": "Uploaded files represent a significant risk to applications. The first step in many attacks is to get some code to the system to be attacked. Then the attack only needs to find a way to get the code executed. Using a file upload helps the attacker accomplish the first step. The application has an option to upload files. Here the application only allows specific files to be uploaded but inspite of the restriction an adversary is able to upload a malicious file to the web server as validation is not done properly.",
        "impact": "An attacker can upload malicious files on server and can able to execute his malicious intention and compromise the security of the application.",
        "rec": "Application should validate if file is having double extension. It should accept files only with single valid acceptable extension",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Application is vulnerable to Content Injection ",
        "severity": "Medium",
        "ref": "",
        "desc": "Content spoofing, also referred to as content injection or context injection, is an attack targeting a user made possible by an injection vulnerability in a web application. When an application does not properly handle user supplied data, an attacker can supply content to a web application, typically via a parameter value, that is reflected back to the user. This presents the user with a modified page under the context of the trusted domain.\nThis attack is typically used as, or in conjunction with, social engineering because the attack is exploiting a code-based vulnerability and a user's trust. ",
        "impact": "Attacker can trick user to visit malious page or can lead to phishing attack",
        "rec": "1) User supplied input should not be directly reflected.\n2) Implement Custom error page.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Local Storage Vulnerability",
        "severity": "Low",
        "ref": "",
        "desc": "Also known as Offline Storage, Web Storage. Underlying storage mechanism may vary from one user agent to the next. In other words, any authentication your application requires can be bypassed by a user with local privileges to the machine on which the data is stored.",
        "impact": "A single Cross Site Scripting can be used to load malicious data into these objects too, so don't consider objects in these to be trusted.",
        "rec": " it's recommended not to store any sensitive information in local storage.",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Client-Side Database vulnerability",
        "severity": "Low",
        "ref": "",
        "desc": "A new standard Indexed Database API or IndexedDB (formerly WebSimpleDB) is actively developed, which provides key/value database storage and methods for performing advanced queries",
        "impact": "WebDatabase content on the client side can be vulnerable to SQL injection. A single Cross Site Scripting can also be used to load malicious data into a web database as well",
        "rec": "proper validation and parameterization must be implemented",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    },
    {
        "title": "Insecure Deserialization",
        "severity": "High",
        "ref": "",
        "desc": "Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks",
        "impact": "These flaws can lead to remote code execution attacks, one of the most serious attacks possible. The business impact depends on the protection needs of the application and data. ",
        "rec": "The only safe architectural pattern is not to accept serialized objects from untrusted sources or to use serialization mediums that only permit primitive data types",
        "cve": "",
        "cvss": "",
        "poc": "",
        "eoe": "",
        "cause": ""
    }
]